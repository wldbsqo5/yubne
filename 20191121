eax =  16bit
ax =

  @ 어셈블리(구조체)
  - 여러 자료형을 가진 변수들을 하나의 그룹 형태로 묶어서 사용하는 자료형
  - 구조체 구문 형식은 다음과 같다
  struct 구조체 이름
  {
        자료형 변수명;
        자료형 변수명;
  };

  @ 어셈블리(함수)
  1. 함수
  - 특정 기능을 수행할 수 있도록 코드들이 집합되어 있는 일종의 작은 프로그램 단위
  - 함수 처리 과정은 함수 호출되면 함수 프롤로그, 함수 본체, 함수 에필로그로 진행된다.
  - 함수가 호출되기 이전에 함수 파라메터 값들과 리턴 주소값이 스택에 PUSH 된다.
  - 그리고 함수 처리가 완료되면 리턴값을 EAX 레지스터에 저장한다.
  - 함수 구문 형식은 다음과 같다.

 반환값 함수명(인자, 인자...)
 {
 	실행할 코드;
 }

  @ 어셈블리(mov)

  1) MOV
- 형식 : mov [Destination] [Source]
- 내용 : [Source]를 [Destination]에 대입
ex )
 문제 :MOV ECX, EAX
 해석 :EAX에 있는 값을 ECX에 대입

  @ 어셈블리(lea)
  2) LEA
- 형식 : lea [Destination] [Source]
- 내용 : [Source]의 주소값을 [Destination]에 대입
ex )
 문제 :LEA EAX, DWORD PTR SS:[EBP-4]
 해석 :[ebp-4] *주소 값을 EAX에 대입

  @ 어셈블리(add,sub)

  1) ADD
- 형식 : add[Operand1] [Operand2]
- 내용 : [Operand1] 과 [Operand2]를 뺀값을 [Operand1]에 저장
ex )
 문제 :ADD EAX,5
 해석 :EAX = EAX+5
 기타 :공간을 제거할때 사용(ADD ESP,8)

2) SUB
- 형식 : sub[Operand1] [Operand2]
- 내용 : [Operand1] 과 [Operand2]를 뺀값을 [Operand1]에 저장
ex )
 문제 :SUB EAX,5
 해석 :EAX = EAX-5
 기타 :지역 변수를 위한 공간을 확보할때 사용 (SUB ESP,8)

  @ 어셈블리(IMUL, IDIV)

   1) IMUL
   - 형식: IMUL [Operand1][Operand2]
   - 내용: 두 오퍼랜드의 곱셈 값을 EAX에 저장
   ex )
   문제 :IMUL EAX,2
   해석 :EAX=EAX*2

   2)IDIV
   - 형식: IDIV [Operand]
   - 내용: EAX 값에서 [Operand]값을 나누기하여 해당 몫은 EAX에 나머지 값은 EDX에 저장
   ex )
   문제 : IDIV eax,2
   해석 : EAX=EAX /2 (몫은 EAX, 나머지값은 EDX에 저장)
   기타 : IDIV를 진행하기 이전에 부호 비트 확장을 하기 위한 코드를 확인할 수 있다.(CBW, CWD, CDQ)

  @ 어셈블리 (JE/JZ)
  1. if 구문
  - 조건에 만족되면 코드를 실행하는 조건문
  - 만약, 조건에 만족하지 않으면 다른 코드를 실행, 프로그램 종료
  - if 구문 형식은 다음과같다

  if(조건 1)
  {
      // 조건1이 만족하면 실행하는 코드
      // 만약, 조건1이 만족하지 않으면,'else if'
  }
  else if(조건 2)
  {
      // 조건2가 만족하면 실행하는 코드
      // 만약, 조건2가 만족하지 않으면, 'else'
  }
  else
  {
      // 조건2가 만족하지 않은 경우 실행하는 코드
  }

  1) CMP
  - 형식 : CMP[Operand1][Operand2]
  - 내용 : [Operand1] 값에서 [Operand2]값을 빼서 결과 값이 '0'인지 확인
  ex )
  문제 : CMP EAX, 1
  해석 : EAX 값이 '1'이면 cmp 결과값은 '0' , 즉 두 오퍼랜드의 값이 동일
  두 오퍼랜드 값을 비교하여 함수의 성공/실패 여부 판단가능
  [참고]함수의 리턴값, 여러가지 가 EAX값에 들어간다.

  2) TEST
  - 형식 : TEST[Operand1][Operand2]
  - 내용 : [Operand1] 값과 [Operand2]값을 AND 연산 실시 , 두 오퍼랜드 값이 '0'인지 확인
  ex )
  문제 : TEST EAX, EAX
  해석 : EAX 값이 '0'이면 두 오퍼랜드 값 '0' 인지 확인

  3) JZ(JE 동일)
  - 형식 : JE [Code Address]
  - 내용 : 비교결과 값이 '0'이면, 즉 ZF=1 이면 해당 주소로 점프
  ex )
   문제 : jz 401140으로
   해석 : zf=1인 경우, 401140으로 점프
  - 조건 : Operand1 == Operand2
