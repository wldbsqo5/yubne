@ 어셈블리(switch)

1. 'switch' 구문

 - 조건에 만족하면 코드를 실행하는 조건문이다.
 - 대신, if 구문과 차이점은 변수 값에 따라서 다른 동작을 실시할 수 있다.
 - 또한, 'break' 제어문과 같이 사용하여 조건에 만족되면 코드를 실행하고 조건 검사를 종료할 수 있다.
 - switch 구문 형식은 다음과 같다.

switch (변수)
{
	case 값1:
	// 값이 '1'인 경우 실행하는 코드
	break;

	case 값2:
	// 값이 '2'인 경우 실행하는 코드
	break;

	default:
	// 위에 조건이 아닌 경우 마지막에 실행하는 코드
}


@ 어셈블리(for)

1. 'for' 구문

 - 일정 횟수를 정해 놓고 반복 작업을 실시하는 반복문이다.
 - for 구문은 어셈블리어 "초기문 -> JMP(아래로) -> 조건분기(아래로) 및 수행문 -> JMP(위로) -> 증감문" 패턴을 갖고 있다.

 ① 초기문에 의해서 반복하는 변수의 값이 정해진다.
 ② 조건문을 검사하고 조건에 맞지 않으면 수행문을 수행한다.
 ③ 수행문을 수행한 이후 증감문을 수행하여 반복카운트를 증가한다.
 ④ 그리고 조건문을 검사하여 조건에 맞지 않으면 수행문을 수행한다.
 ⑤ 만약, 조건에 맞는다면 반복을 종료한다.

 - for 구문의 형식은 다음과 같다.

for (변수의 초기값; 조건; 증감 연산)
{
	// 반복 작업을 실행할 코드
}

2) 'cl' 명령어를 이용한 최적화 컴파일 실시

cl for.cpp /link /debug /opt:icf,ref


2. 올리디버거를 이용한 'for.exe' 분석

- 메모리 주소, 레지스터 저장 값, 스택 내용, 메모리 덤프 내용, 비교 및 분기 내용 확인


@ 어셈블리(while)

1. 'while' 구문

 - 일정 횟수를 정해 놓지 않고 조건이 만족할때 까지 반복 작업을 실시하는 반복문이다.
 - while 구문은 어셈블리어에서 초기문 -> 조건분기(아래로) -> 증가문 -> JMP(위로) 패턴을 갖고 있다.

 ① 초기문에 의해서 반복하는 변수의 값이 정해진다.
 ② 조건문을 검사하고 조건에 맞지 않으면 수행문을 수행한다.
 ③ 그리고 조건문으로 다시 이동한다.
 ④ 조건문을 검사하여 조건에 맞지 않으면 다시 증가문을 수행한다.
 ⑤ 만약, 조간에 맞다면 반복을 종료한다.

[참고] for & while

 - for : 100번의 질문을 실시한다.
 - while : 이해할때까지 질문을 실시한다.

 - while 구문 형식은 다음과 같다.

변수의 초기값

while(조건)
{
	// 증감 연산
	// 반복 작업을 실시할 코드
}


( url : http://blog.naver.com/PostView.nhn?blogId=evenesence&logNo=110153853938 )
( https://www.jobplanet.co.kr/companies/86783/feeds/1187 )
