
@ 어셈블리 및 레지스터

1. 어셈블리어
 - 기계어가 사용하는 2진수(표기할땐 16진수) 숫자들을 사람들이 복 쉽게 해석한 언어
 - C 언어와 같은 고급 언어가 아닌 하급 언어이다.
 - 같은 동작을 처리하는 프로그램인 경우, C 언어는 몇줄, 어셈블리어는 몇십줄 코딩이 필요하다

2. 레지스터 (cpu)

 - CPU가 갖고 있는 저장소, 보통 작은 데이터의 임시 저장을 담당한다.
 - 레지스터를 쉽게 이해하려면, '지역 변수 개념이다' 라고 생각하면 쉽다.
 - 범용 레지스터 : EAX, EDX, ECX, EBX, ESI, EDI, ESP, EBP .... EIP(범용이라고는 말안한다)

 1) EAX
 - 32bit로 구성되어 있다, 16bit 환경에서는 'AX'라고부른다.
 - 이를 각각 8bit 씩 AH(상위 8bit), AL(하위 8bit)로 구성된다. (RAX 도 알아두기 (64bit 환경))
 - 산술 연산(덧셈, 뺄셈, 곱셈, 나눗셈), 논리 연산을 수행한다.
 - 함수의 리턴값이 저장되는 레지스터(중요함)
 (msdn << 마이크로소프트에서 제공, 구글에서 함수 입력할때 같이쓰면 it 정보가 나온다.)

 2) EDX
 - 32bit로 구성되어 있다, 16bit 환경에서는 'DX'라고부른다.
 - 이를 각각 8bit 씩 DH(상위 8bit), DL(하위 8bit)로 구성된다. (RAX 도 알아두기 (64bit 환경))
 - 역시 산술 연산을 담당한다.
 - 만약, 연산 결과 값이 32bit를 초과할 경우, EAX 용량이 부족하기 때문에 추가적인 공간 할당 용도로 사용
 - 일반 자료 저장 및 각종 연산에 사용하는 변수 개념으로도 사용됨

 3) ECX

 - 32bit로 구성되어 있다, 16bit 환경에서는 'CX'라고부른다.
 - 이를 각각 8bit 씩 CH(상위 8bit), CL(하위 8bit)로 구성된다. (RAX 도 알아두기 (64bit 환경))
 - 반복문(for, while)을 사용할 경우, 반복 카운터가 저장된다. (for 문에서 int i에서 'i' 개념)

 4) EBX

 - 32bit로 구성되어 있다, 16bit 환경에서는 'BX'라고부른다.
 - 이를 각각 8bit 씩 BH(상위 8bit), BL(하위 8bit)로 구성된다. (RAX 도 알아두기 (64bit 환경))
 - 메모리 주소를 저장하거나, 공간 활용을 위한 여분 레지스터 (주요도가 가장떨어지는 레지스터(여분))

 5) ESI & EDI

 - 메모리의 한 영역에서 다른 영역으로 데이터를 연속해서 복사할때 사용한다.
 - Ex) Ctrl+C(ESI 개념) -> Ctrl+V(EDI 개념) (복사 , 붙여넣기) 원본의 주소를 목적지에 복사하는것

 6) ESP

 - 현재 스택 영역에서 가장 낮은 주소를 가르키는 레지스터, 즉 스택의 끝 위치를 알려줌
 - 스택 포인터

 7) EBP

 - 스택에서 함수의 시작 주소 값이 저장됨
 - 베이스 포인터

 8) EIP

 - 다음 실행될 명령어의 주소가 저장됨
 - EIP 레지스터 정보를 통해서 다음 실행할 명령어가 무엇인지 확인할 수 있다.
