@ PE 파일 분석(PE 바디-섹션)

 - 분석 환경 : Vmware + Windows7(32bit)
 - 분석 도구 : PEiD, PEview, CFF Explorer, HxD, OllyDbg
 - 분석 파일 : 'calc.exe'
 - 참조 사이트 : https://docs.microsoft.com/en-us/windows/win32/debug/pe-format

1. PE 바디

 - SECTION .text, .data, .rsrc, .reloc....


1. '.text' 섹션

 - 프로그램 코드와 실행 명령어가 포함되어 있는 영역
 - PEview는 내용이 바이너리로 출력되므로 올리디버거(Ctrl+g -> 10001637 -> 55 -> PUSH EBP)에서 확인한다.

2. '.data' 섹션

 - 전역 변수, 정적 변수의 할당을 위한 영역
 - PEview -> VA 주소 변경 -> 01055660 -> 내용 확인

3. '.rsrc' 섹션

 - 프로그램에서 사용하는 리소스 정보(아이콘, 이미지, 추가 바이너리)를 위한 영역

4. '.reloc' 섹션

 - 실행 파일이 로더에 의해서 ImageBase에 로드할때 필요한 재배치 정보를 위한 영역
 - 만약, 실행 파일 로드될 때 ImageBase에 다른 실행 파일이 로드되어 있다면, 중첩되는 문제가 발생한다.
 - 이런 문제를 해결하기 위해서 로더는 매핑 가능한 다른 주소를 검색하여 해장 주소에 실행 파일을 로드한다.
 - 이때, 로드되는 주소가 변경되면 절대 주소 값을 변경된 주소에 해당하는 값으로 수정되어야 한다.
 - 이렇게 수정된 주소 값 정보들을 .reloc 섹션에 저장하여 다른 실행 파일(EXE, DLL)과 중첩되지 않게 한다.


@  PE 파일 분석(재배치)

1. PE 재배치 위치 파악

 - ImageBase			0x01000000
 - .reloc 섹션 시작 주소		0x000BC000
 - Base Relocation Table		RVA of Block	0x00001000
				Size of Block	0x000000B4
 - 'cale.exe'가 실행될 때 ImageBase	0x00450000

2. PE 재배치 계산

 1) 하드코딩된 주소(재배치될 주소)가 있는 오프셋 구하기

ImageBase	VirtualAddress(RVA of Block)		Size of Block	Type+Offset

0x01000000	0x00001000			0x000000B4	0x3000 + 0x0641

 - VirtualAddress(RVA of Block) + Offset = 0x00001000 + 0x0641 = 0x00001641

 - '0x00001641'으로 이동하여 4byte 값을 확인한다.

 - 64 40 05 01	->	0x01054064


 2) 하드코딩된 주소(재배치될 주소)에서 ImageBase 값만큼 뺀다.

 - 0x01054064 - 0x010000000 = 0x00054064

 3) 파일이 로딩될때 ImageBase 대역에 '0x00054064'를 더한다.

  - 0x00450000 + 0x00054064 = 0x004A4064


@ IAT

 - 분석 환경 : Vmware + Windows7(32bit)
 - 분석 도구 : PEiD, PEview, CFF Explorer, HxD, OllyDbg
 - 분석 파일 : 'calc(ASLR X).exe'
 - 참조 사이트 : https://docs.microsoft.com/en-us/windows/win32/debug/pe-format



1. IAT

 - Import Address Table
 - DLL 파일이 메모리 상에 로드되는 주소값을 갖고 있으며, 암시적 링크에서 사용하는 테이블이다.
 - 'SHELL32.dll'의 'SHGetSpecialFolderPathW' 함수를 호출할때, 직접 호출하지 않고 PE 로더가 프로그램 실행시
   '0x00001000' 주소에 저장된 해당 함수 주소 값(0x76140428)을 가져와서 호출한다.


2. IDT

 - Import Directory Table
 - DLL 이미지 내의 Entry Point에 대한 RVA 정보를 포함한다.
 - IDT는 PE 바디 영역에 있으며, IMAGE_OPTIONAL_HEADER에서 DATA Directory에서 확인할 수 있다.

 - IDT 구조체 배열의 시작 주소는 '0x00051AFC'가 되며, 크기는 '0x00000154'가 된다.
 - '0x00051AFC' RVA는 .text 섹션 범위에 포함된다.

 1) IDT 구조체 RAW 구하기

 - RAW = RVA - Virtual Address(섹션의 RVA) + Pointer to Raw Data

메모리에서 .text 섹션 범위		0x01001000 ~ 0x01053CA1
RVA				0x00051AFC
Virtual Address(섹션의 RVA)		0x00001000
Pointer to Raw Data		0x00000400
파일에서 .text 섹션 범위		0x00000400 ~ 0x00053200 전까지

 - RAW = 0x00051AFC - 0x0001000 + 0x00000400 = 0x00050EFC
 - RVA가 '51AFC'인 경우, RAW는 '0x50EFC'이며, 파일에서 .text 섹션의 범위이다.

 2) IDT 구조체 필드

 - 'cale.exe' 파일을 HxD로 오픈하여 영역 범위 확인
 - RAW = 0x00050EFC
 - 크기 = 0x00000154(340byte)


3. IDT 구조체 배열 첫번째 요소 영역

 - IDT 구조체 배열의 요소들을 각각 20byte로 구성되어 있다.

*Original First Thunk	20 1D 05 00 	00 05 1D 20

 - Import Name Table의 RVA 주소이다.
 - INT RVA : 0x00051D20
 - RAW = 51D20 - 1000 + 400 = 51120
 - 파일에서 INT 시작 주소는 '0x00051120'이다.


Time Date Stamp		FF FF FF FF
Forwarder Chain		FF FF FF FF

*Name			14 1D 05 00 	00 05 1D 14

 - DLL 이름의 RVA 주소이다.
 - DLL Name RVA : 0x0051D14
 - RAW = 51D14 - 1000 + 400 = 51114
 - 파일에서 Name 시작 주소는 '0x00051114'이다.

*First Thunk		00 10 00 00	00 00 10 00

 - Import Address Table의 RAV 주소이다.
 - IAT RVA : 0x1000
 - RAW = 1000 - 1000 + 400 = 400
 - 파일에서 IAT 시작 주소는 '0x00000400'이다.

 1) DLL Name

 - 파일에서 Name 시작 주소는 '0x00051114'이다.
 - SHELL32.dll

 2) INT

 - 파일에서 INT 시작 주소는 '0x00051120'이다.
 - Import하는 SHELL32.dll의 함수 정보가 있는 영역이다.
 - 각각의 정보는 4byte로 단위로 구성되며, 배열의 끝은 NULL 4byte로 끝난다.

50 23 05 00 6A 23 05 00 7E 23 05 00 A5 00 00 80 8C 23 05 00 00 00 00 00

 SHELL32.dll의 첫번째 함수 RAW = 52350 - 1000 + 400 = 51750
 SHELL32.dll의 두번째 함수 RAW = 5236A - 1000 + 400
 SHELL32.dll의 세번째 함수 RAW = 5237E - 1000 + 400
 SHELL32.dll의 네번째 함수 RAW = 5238C - 1000 + 400
