  @ PE 파일 분석(PE 헤더)
   - 분석 환경: 무엇에서 할건지 정하고할것
   - 분석 도구: 무엇으로 할건지 정하고할것
   - 분석 파일: 무엇을 할건지 정하고할것

  @ PE 헤더
 - PE 파일에 대한 속성 정보 및 PE 바디 내용에 대한 상세 정보들이 포함되어 있다.
[참조] e_magic, e_lfanew.png
오프셋(끝)과 시그니처(처음)가 중요


  4. MS-DOS Stub Program
   - 152 byte
   - MS-DOS, Windows 3.1에서 실행하면 "This program cannot be run in DOS mode" 문자열을 출력하는 영역
   [참조] image_dos_header.png

  5. IMAGE_NT_HEADERS
   - 248byte
   - 3가지 영역: Signature, IMAGE_FILE_HEADER, IMAGE_OPTIONAL_HEADER
   [참조] IMAGE_NT_HEADERS.png

   1) Signature
    - 오프셋: 0xD8 ~ 0xDB
    - 크기: 4byte
    - 데이터: 00004550(PE)
    - NT 시그니처

   2) IMAGE_FILE_HEADER
    - 오프셋: 0xDC ~ 0xEF
    - 크기: 20byte
    - CPU 정보, 섹션 개수, 파일 생성 시간, Optional Header 크기, 파일 특성 정보

    Machine			             2byte		4C 01              --cpu 유형
    Number of Sections	     2byte		04 00              --pe 파일이 갖고 있는 섹션개수
    Time Date Stamp		       4byte		9D 97 E7 4C        --pe 파일 생성 시간  (여기를 주로 본다.)
    Pointer to Symbol Table	 4byte		00 00 00 00
    Number of Symblos	       4byte		00 00 00 00
    Size of Optional Header	 2byte		E0 00
    Characteristics		       2byte		02 01

   3) IMAGE_OPTIONAL_HEADER
    - 오프셋: 0xF0 ~ 0x1CF
    - 크기 : 224byte
    - 데이터 : 실행 파일 로드 및 실행에 사용되는 정보
    - NT 추가 필드: 윈도우 링커/로더가 요구하는 정보


*Magic			2byte		0B 01		01 0B

 - IMAGE_OPTIONAL_HEADER 시그니처
 - 32bit PE : 0x010B
 - 64bit PE : 0x020B

Major Linker Version	1byte		09		09
Minor Linker Version	1byte		00		00

*Size of Code		4byte		00 2E 05 00	00 05 2E 00

 - 코드 섹션(.text 섹션)의 크기 : 0x52E00

Size of Initialized Data	4byte		00 A6 06 00	00 06 A6 00

 - 코드 섹션을 제외한 초기화된 데이터 섹션의 크기

Size of Uninitialized Data	4byte		00 00 00 00	00 00 00 00

 - 코드 섹션을 제외한 초기화되지 않은 데이터 섹션의 크기

*Address of Entry Point	4byte		6C 2D 01 00	00 01 2D 6C

 - PE 파일이 메모리에서 시작되는 위치 : 0x12D6C

*Base of Code		4byte		00 10 00 00	00 00 10 00

 - 코드 섹션(.text 섹션)의 RVA 주소 : 0x1000

*Base of Data		4byte		00 20 05 00	00 05 20 00

 - 데이터 섹션(.data 섹션)의 RVA 주소 : 0x52000

*Image Base		4byte		00 00 00 01	01 00 00 00

 - PE 파일을 로드할 가상 메모리의 주소이다.
 - EXE, DLL 파일 : User Memory 영역(0x00000000 ~ 0x7FFFFFFF)

	EXE 파일의 Image Base : 0x00400000
	DLL 파일의 Image Base : 0x01000000 (윈도우즈에서 기본적으로 제공하는 EXE 파일도 해당)

  - SYS 파일 : Kernal Memory 영역(0x80000000 ~ 0xFFFFFFFF)

  *Section Alignment		4byte		00 10 00 00	00 00 10 00

   - 메모리에서 섹션의 최소 단위 : 0x1000(4096byte)
   - Section Alignment >= File Alignment

  Ex1) .text 섹션의 데이터가 512byte 경우, 섹션 얼라이먼트에 의해서 4096byte 할당
  Ex2) .data 섹션의 데이터가 6000byte 경우, 섹션 얼라이먼트에 의해서 8192byte 할당

  *Alignment		4byte		00 02 00 00	00 00 02 00

   - 파일에서 섹션의 최소 단위 : 0x200(512byte)

  Major O/S Version		2byte		06 00		00 06
  Minor O/S Version		2byte		01 00		00 01

   - PE 파일을 실행할때 필요한 운영체제 버전

  Major Image Version	2byte		06 00		00 06
  Minor Image Version	2byte		01 00		00 01

   - PE 파일 이미지 버전(제작자가 정의 가능한 필드 영역)

  Major Subsystem Version	2byte		06 00		00 06
  Minor Subsystem Version	2byte		01 00		00 01

   - PE 파일을 실행할때 필요한 서브시스템 버전

  Win32 Version Value	4byte		00 00 00 00	00 00 00 00

  Size of Image		4byte		00 00 0C 00	00 0C 00 00

   - PE 파일이 메모리에 로딩되면, 가상 메모리에서 PE 이미지 크기 : 0xC0000(786432byte)

  Size of Headers		4byte		00 04 00 00	00 00 04 00

   - PE 헤더 전체 크기 : 0x400(1024byte)

  Checksum		4byte		30 BD 0C 00	00 0C BD 30

   - 이미지의 체크섬

  *Subsystem		2byte		02 00		00 02

   - 서브시스템
   - IMAGE_SUBSYSTEM_NATIVE	1	Device drivers and native Windows processes
   - IMAGE_SUBSYSTEM_WINDOWS_GUI	2	The Windows graphical user interface (GUI) subsystem
   - IMAGE_SUBSYSTEM_WINDOWS_CUI	3	The Windows character subsystem

  DLL Characteristic		2byte		40 81		81 40    <-- 여기에서 0040 을 0000으로바꾸면 ASLR기능이 적용안되도록할수잇다.

   - 시스템/메모리 보호 기능 플래그
   - 0x0040 : IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE (해당 값을 0x0000으로 변경하면 ASLR 기능 해지)

  Size of Stack Reserve	4byte		00 00 04 00	00 04 00 00
  Size of Stack Commit	4byte		00 20 00 00	00 00 20 00
  Size of Heap Reserve	4byte		00 00 10 00	00 10 00 00
  Size of Heap Commit	4byte		00 10 00 00	00 00 10 00
  Loader Flags		4byte		00 00 00 00	00 00 00 00

  *Number of Data Directories	4byte		10 00 00 00	00 00 00 10

   - Data Directory 배열 구조체 개수 : 0x10(16개)

  *Data Directory		각각 8byte

   - IMAGE_DATA_DIRECTORY 구조체
   - 각 배열 항목마다 RVA(4byte)와 Size(4byte)로 구성됨
